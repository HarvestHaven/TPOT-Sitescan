{"ast":null,"code":"import { useMemo } from 'react';\nimport { applySnapshot, types } from 'mobx-state-tree';\nlet store;\nconst Store = types.model({\n  lastUpdate: types.Date // light: false,\n\n}).actions(self => {\n  let timer;\n\n  const start = () => {\n    timer = setInterval(() => {\n      // mobx-state-tree doesn't allow anonymous callbacks changing data.\n      // Pass off to another action instead (need to cast self as any\n      // because typescript doesn't yet know about the actions we're\n      // adding to self here)\n      ;\n      self.update();\n    }, 1000);\n  };\n\n  const update = () => {\n    self.lastUpdate = new Date(Date.now()); // self.light = true\n  };\n\n  const stop = () => {\n    clearInterval(timer);\n  };\n\n  return {\n    start,\n    stop,\n    update\n  };\n});\nexport function initializeStore(snapshot = null) {\n  var _store2;\n\n  const _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : Store.create({\n    lastUpdate: 0\n  }); // If your page has Next.js data fetching methods that use a Mobx store, it will\n  // get hydrated here, check `pages/ssg.tsx` and `pages/ssr.tsx` for more details\n\n\n  if (snapshot) {\n    applySnapshot(_store, snapshot);\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return store;\n}\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/home/michael/Desktop/CodeProjects/TPOT/TPOT-sitescan/particle-parser/store.ts"],"names":["useMemo","applySnapshot","types","store","Store","model","lastUpdate","Date","actions","self","timer","start","setInterval","update","now","stop","clearInterval","initializeStore","snapshot","_store","create","useStore","initialState"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SACEC,aADF,EAKEC,KALF,QAMO,iBANP;AAQA,IAAIC,KAAJ;AAEA,MAAMC,KAAK,GAAGF,KAAK,CAChBG,KADW,CACL;AACLC,EAAAA,UAAU,EAAEJ,KAAK,CAACK,IADb,CAEL;;AAFK,CADK,EAKXC,OALW,CAKFC,IAAD,IAAU;AACjB,MAAIC,KAAJ;;AACA,QAAMC,KAAK,GAAG,MAAM;AAClBD,IAAAA,KAAK,GAAGE,WAAW,CAAC,MAAM;AACxB;AACA;AACA;AACA;AACA;AAAEH,MAAAA,IAAD,CAAcI,MAAd;AACF,KANkB,EAMhB,IANgB,CAAnB;AAOD,GARD;;AASA,QAAMA,MAAM,GAAG,MAAM;AACnBJ,IAAAA,IAAI,CAACH,UAAL,GAAkB,IAAIC,IAAJ,CAASA,IAAI,CAACO,GAAL,EAAT,CAAlB,CADmB,CAEnB;AACD,GAHD;;AAIA,QAAMC,IAAI,GAAG,MAAM;AACjBC,IAAAA,aAAa,CAACN,KAAD,CAAb;AACD,GAFD;;AAGA,SAAO;AAAEC,IAAAA,KAAF;AAASI,IAAAA,IAAT;AAAeF,IAAAA;AAAf,GAAP;AACD,CAxBW,CAAd;AA8BA,OAAO,SAASI,eAAT,CAAyBC,QAAQ,GAAG,IAApC,EAA0C;AAAA;;AAC/C,QAAMC,MAAM,cAAGhB,KAAH,6CAAYC,KAAK,CAACgB,MAAN,CAAa;AAAEd,IAAAA,UAAU,EAAE;AAAd,GAAb,CAAxB,CAD+C,CAG/C;AACA;;;AACA,MAAIY,QAAJ,EAAc;AACZjB,IAAAA,aAAa,CAACkB,MAAD,EAASD,QAAT,CAAb;AACD,GAP8C,CAQ/C;;;AACA,YAAmC,OAAOC,MAAP,CATY,CAU/C;;AACA,MAAI,CAAChB,KAAL,EAAYA,KAAK,GAAGgB,MAAR;AAEZ,SAAOhB,KAAP;AACD;AAED,OAAO,SAASkB,QAAT,CAAkBC,YAAlB,EAAqC;AAC1C,QAAMnB,KAAK,GAAGH,OAAO,CAAC,MAAMiB,eAAe,CAACK,YAAD,CAAtB,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOnB,KAAP;AACD","sourcesContent":["import { useMemo } from 'react'\nimport {\n  applySnapshot,\n  Instance,\n  SnapshotIn,\n  SnapshotOut,\n  types,\n} from 'mobx-state-tree'\n\nlet store: IStore | undefined\n\nconst Store = types\n  .model({\n    lastUpdate: types.Date,\n    // light: false,\n  })\n  .actions((self) => {\n    let timer: any\n    const start = () => {\n      timer = setInterval(() => {\n        // mobx-state-tree doesn't allow anonymous callbacks changing data.\n        // Pass off to another action instead (need to cast self as any\n        // because typescript doesn't yet know about the actions we're\n        // adding to self here)\n        ;(self as any).update()\n      }, 1000)\n    }\n    const update = () => {\n      self.lastUpdate = new Date(Date.now())\n      // self.light = true\n    }\n    const stop = () => {\n      clearInterval(timer)\n    }\n    return { start, stop, update }\n  })\n\nexport type IStore = Instance<typeof Store>\nexport type IStoreSnapshotIn = SnapshotIn<typeof Store>\nexport type IStoreSnapshotOut = SnapshotOut<typeof Store>\n\nexport function initializeStore(snapshot = null) {\n  const _store = store ?? Store.create({ lastUpdate: 0 })\n\n  // If your page has Next.js data fetching methods that use a Mobx store, it will\n  // get hydrated here, check `pages/ssg.tsx` and `pages/ssr.tsx` for more details\n  if (snapshot) {\n    applySnapshot(_store, snapshot)\n  }\n  // For SSG and SSR always create a new store\n  if (typeof window === 'undefined') return _store\n  // Create the store once in the client\n  if (!store) store = _store\n\n  return store\n}\n\nexport function useStore(initialState: any) {\n  const store = useMemo(() => initializeStore(initialState), [initialState])\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}