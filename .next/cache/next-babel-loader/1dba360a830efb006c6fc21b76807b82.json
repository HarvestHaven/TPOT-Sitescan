{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { wp } from '../wordpress/api'; // A. Use wpapi to pull a specific paper\n// B. Take all html from that paper and feed it to particle finder\n\nvar sampleUrl = 'https://www.thepathoftruth.com/what-the-lord-has-done-with-me/part9/p1.htm';\nvar domainUrl = 'https://www.thepathoftruth.com/';\nvar theoAuto = 'what-the-lord-has-done-with-me/';\n\nvar getChapter = function getChapter(n) {\n  return \"part\".concat(n, \"/\");\n};\n\nvar getPage = function getPage(n) {\n  return \"p\".concat(n);\n}; // const sampleSlug = 'all-men-are-not-from-god-2'\n\n\nexport var theoAutoURL = function theoAutoURL(chapter, page) {\n  return domainUrl + theoAuto + getChapter(chapter) + getPage(page) + '.htm';\n};\nexport var getPapersByUrlAsync = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var url,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = _args.length > 0 && _args[0] !== undefined ? _args[0] : '';\n            url = url.trim();\n\n            if (url) {\n              _context.next = 5;\n              break;\n            }\n\n            console.warn('cannot handle an empty url');\n            return _context.abrupt(\"return\");\n\n          case 5:\n            console.log('searching for url :>> ', url);\n            return _context.abrupt(\"return\", wp.pages().search(url));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getPapersByUrlAsync() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getTheoPaperAsync = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(chapter) {\n    var page,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            page = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 1;\n            _context2.next = 3;\n            return getPapersByUrlAsync(theoAutoURL(chapter, page));\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getTheoPaperAsync(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // getPaperByUrl(sampleUrl)\n// getPaperByUrl(theoAutoURL(9, 1))\n// .then(result => {\n//     let filtered = result.filter(page=>page.slug!=='sitemap')\n//     const slugs = result.map(page => page.slug);\n//     // console.log('result :>> ', result);\n//     console.log('filtered :>> ', filtered)            \n//     // console.log('slugs :>> ', slugs)\n// })\n// // We can ignore Unexpected token ﻿ in JSON at position 0, per this explanation:\n// .catch(error => console.error(error.message))\n// const result = await getPaperByUrl(sampleUrl)\n// console.log('result :>> ', result)\n// 1. Find tags around a Particle\n//  a. Verify title is 'Particle'\n//  b. Take the contents within that particle and run countWords() on it.\n// 2. Create a countWords() function that creates a weighted hashmap of individual words and their counts.","map":{"version":3,"sources":["/home/michael/Desktop/CodeProjects/TPOT/TPOT-sitescan/components/particle-scanner.ts"],"names":["wp","sampleUrl","domainUrl","theoAuto","getChapter","n","getPage","theoAutoURL","chapter","page","getPapersByUrlAsync","url","trim","console","warn","log","pages","search","getTheoPaperAsync"],"mappings":";;AAAA,SAASA,EAAT,QAAmB,kBAAnB,C,CAEA;AACA;;AAEA,IAAMC,SAAS,GAAG,4EAAlB;AACA,IAAMC,SAAS,GAAG,iCAAlB;AACA,IAAMC,QAAQ,GAAG,iCAAjB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD;AAAA,uBAAsBA,CAAtB;AAAA,CAAnB;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACD,CAAD;AAAA,oBAAmBA,CAAnB;AAAA,CAAhB,C,CACA;;;AAEA,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAkBC,IAAlB;AAAA,SAAmCP,SAAS,GAAGC,QAAZ,GAAuBC,UAAU,CAACI,OAAD,CAAjC,GAA6CF,OAAO,CAACG,IAAD,CAApD,GAA6D,MAAhG;AAAA,CAApB;AAEP,OAAO,IAAMC,mBAAmB;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOC,YAAAA,GAAP,2DAAqB,EAArB;AAC/BA,YAAAA,GAAG,GAAGA,GAAG,CAACC,IAAJ,EAAN;;AAD+B,gBAE1BD,GAF0B;AAAA;AAAA;AAAA;;AAG3BE,YAAAA,OAAO,CAACC,IAAR,CAAa,4BAAb;AAH2B;;AAAA;AAM/BD,YAAAA,OAAO,CAACE,GAAR,CAAY,wBAAZ,EAAsCJ,GAAtC;AAN+B,6CAOxBX,EAAE,CAACgB,KAAH,GACFC,MADE,CACKN,GADL,CAPwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBD,mBAAmB;AAAA;AAAA;AAAA,GAAzB;AAYP,OAAO,IAAMQ,iBAAiB;AAAA,uEAAG,kBAAOV,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwBC,YAAAA,IAAxB,8DAAuC,CAAvC;AAAA;AAAA,mBACvBC,mBAAmB,CAACH,WAAW,CAACC,OAAD,EAAUC,IAAV,CAAZ,CADI;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBS,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { wp } from '../wordpress/api';\n\n// A. Use wpapi to pull a specific paper\n// B. Take all html from that paper and feed it to particle finder\n\nconst sampleUrl = 'https://www.thepathoftruth.com/what-the-lord-has-done-with-me/part9/p1.htm'\nconst domainUrl = 'https://www.thepathoftruth.com/'\nconst theoAuto = 'what-the-lord-has-done-with-me/'\nconst getChapter = (n: number) => `part${n}/`;\nconst getPage = (n: number) => `p${n}`;\n// const sampleSlug = 'all-men-are-not-from-god-2'\n\nexport const theoAutoURL = (chapter: number, page: number) => domainUrl + theoAuto + getChapter(chapter) + getPage(page) + '.htm';\n\nexport const getPapersByUrlAsync = async (url: string = '') => {\n    url = url.trim();\n    if (!url) {\n        console.warn('cannot handle an empty url');\n        return\n    }\n    console.log('searching for url :>> ', url);\n    return wp.pages()\n        .search(url)\n    // .slug(sampleSlug)\n}\n\nexport const getTheoPaperAsync = async (chapter: number, page: number = 1) =>\n    await getPapersByUrlAsync(theoAutoURL(chapter, page))\n\n// getPaperByUrl(sampleUrl)\n// getPaperByUrl(theoAutoURL(9, 1))\n// .then(result => {\n//     let filtered = result.filter(page=>page.slug!=='sitemap')\n//     const slugs = result.map(page => page.slug);\n//     // console.log('result :>> ', result);\n//     console.log('filtered :>> ', filtered)            \n//     // console.log('slugs :>> ', slugs)\n// })\n\n// // We can ignore Unexpected token ﻿ in JSON at position 0, per this explanation:\n// .catch(error => console.error(error.message))\n\n// const result = await getPaperByUrl(sampleUrl)\n// console.log('result :>> ', result)\n\n// 1. Find tags around a Particle\n//  a. Verify title is 'Particle'\n//  b. Take the contents within that particle and run countWords() on it.\n// 2. Create a countWords() function that creates a weighted hashmap of individual words and their counts.\n\n"]},"metadata":{},"sourceType":"module"}