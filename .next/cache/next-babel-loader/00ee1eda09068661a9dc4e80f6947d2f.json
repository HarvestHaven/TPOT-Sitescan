{"ast":null,"code":"import { wp } from '../wordpress/api'; // A. Use wpapi to pull a specific paper\n// B. Take all html from that paper and feed it to particle finder\n\nvar sampleUrl = 'https://www.thepathoftruth.com/what-the-lord-has-done-with-me/part9/p1.htm';\nvar domainUrl = 'https://www.thepathoftruth.com/';\nvar theoAuto = 'what-the-lord-has-done-with-me/';\n\nvar getChapter = function getChapter(n) {\n  return \"part\".concat(n, \"/\");\n};\n\nvar getPage = function getPage(n) {\n  return \"p\".concat(n);\n};\n\nvar sampleSlug = 'all-men-are-not-from-god-2';\nexport var theoAutoURL = function theoAutoURL(chapter, page) {\n  return domainUrl + theoAuto + getChapter(chapter) + getPage(page) + '.htm';\n};\nexport var getPaperByUrl = function getPaperByUrl() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  url = url.trim();\n\n  if (!url) {\n    console.warn('cannot handle an empty url');\n    return;\n  }\n\n  console.log('searching for url :>> ', url);\n  return wp.pages().search(url) // .slug(sampleSlug)\n  // .path(url)\n  .then(function (result) {\n    var filtered = result.filter(function (page) {\n      return page.slug !== 'sitemap';\n    });\n    var slugs = result.map(function (page) {\n      return page.slug;\n    }); // console.log('result :>> ', result);\n\n    console.log('filtered :>> ', filtered); // console.log('slugs :>> ', slugs)\n  }) // We can ignore Unexpected token ﻿ in JSON at position 0, per this explanation:\n  [\"catch\"](function (error) {\n    return console.error(error.message);\n  }); //.map(r=>r.content)\n}; // getPaperByUrl(sampleUrl)\n\ngetPaperByUrl(theoAutoURL(9, 1)).then(function (result) {\n  var filtered = result.filter(function (page) {\n    return page.slug !== 'sitemap';\n  });\n  var slugs = result.map(function (page) {\n    return page.slug;\n  }); // console.log('result :>> ', result);\n\n  console.log('filtered :>> ', filtered); // console.log('slugs :>> ', slugs)\n}); // const result = await getPaperByUrl(sampleUrl)\n// console.log('result :>> ', result)\n// 1. Find tags around a Particle\n//  a. Verify title is 'Particle'\n//  b. Take the contents within that particle and run countWords() on it.\n// 2. Create a countWords() function that creates a weighted hashmap of individual words and their counts.","map":{"version":3,"sources":["/home/michael/Desktop/CodeProjects/TPOT/TPOT-sitescan/particle-parser/components/particle-scanner.ts"],"names":["wp","sampleUrl","domainUrl","theoAuto","getChapter","n","getPage","sampleSlug","theoAutoURL","chapter","page","getPaperByUrl","url","trim","console","warn","log","pages","search","then","result","filtered","filter","slug","slugs","map","error","message"],"mappings":"AAAA,SAASA,EAAT,QAAmB,kBAAnB,C,CAEA;AACA;;AAEA,IAAMC,SAAS,GAAG,4EAAlB;AACA,IAAMC,SAAS,GAAG,iCAAlB;AACA,IAAMC,QAAQ,GAAG,iCAAjB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD;AAAA,uBAAsBA,CAAtB;AAAA,CAAnB;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACD,CAAD;AAAA,oBAAmBA,CAAnB;AAAA,CAAhB;;AACA,IAAME,UAAU,GAAG,4BAAnB;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAkBC,IAAlB;AAAA,SAAmCR,SAAS,GAAGC,QAAZ,GAAuBC,UAAU,CAACK,OAAD,CAAjC,GAA6CH,OAAO,CAACI,IAAD,CAApD,GAA6D,MAAhG;AAAA,CAApB;AAGP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAsB;AAAA,MAArBC,GAAqB,uEAAP,EAAO;AAC/CA,EAAAA,GAAG,GAAGA,GAAG,CAACC,IAAJ,EAAN;;AACA,MAAI,CAACD,GAAL,EAAU;AACNE,IAAAA,OAAO,CAACC,IAAR,CAAa,4BAAb;AACA;AACH;;AACDD,EAAAA,OAAO,CAACE,GAAR,CAAY,wBAAZ,EAAsCJ,GAAtC;AACA,SAAOZ,EAAE,CAACiB,KAAH,GACFC,MADE,CACKN,GADL,EAEH;AACA;AAHG,GAIFO,IAJE,CAIG,UAAAC,MAAM,EAAI;AACZ,QAAIC,QAAQ,GAAGD,MAAM,CAACE,MAAP,CAAc,UAAAZ,IAAI;AAAA,aAAEA,IAAI,CAACa,IAAL,KAAY,SAAd;AAAA,KAAlB,CAAf;AACA,QAAMC,KAAK,GAAGJ,MAAM,CAACK,GAAP,CAAW,UAAAf,IAAI;AAAA,aAAIA,IAAI,CAACa,IAAT;AAAA,KAAf,CAAd,CAFY,CAGZ;;AACAT,IAAAA,OAAO,CAACE,GAAR,CAAY,eAAZ,EAA6BK,QAA7B,EAJY,CAKZ;AACH,GAVE,EAYH;AAZG,YAaI,UAAAK,KAAK;AAAA,WAAIZ,OAAO,CAACY,KAAR,CAAcA,KAAK,CAACC,OAApB,CAAJ;AAAA,GAbT,CAAP,CAP+C,CAsB/C;AAEH,CAxBM,C,CA2BP;;AACAhB,aAAa,CAACH,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAZ,CAAb,CACCW,IADD,CACM,UAAAC,MAAM,EAAI;AACZ,MAAIC,QAAQ,GAAGD,MAAM,CAACE,MAAP,CAAc,UAAAZ,IAAI;AAAA,WAAEA,IAAI,CAACa,IAAL,KAAY,SAAd;AAAA,GAAlB,CAAf;AACA,MAAMC,KAAK,GAAGJ,MAAM,CAACK,GAAP,CAAW,UAAAf,IAAI;AAAA,WAAIA,IAAI,CAACa,IAAT;AAAA,GAAf,CAAd,CAFY,CAGZ;;AACAT,EAAAA,OAAO,CAACE,GAAR,CAAY,eAAZ,EAA6BK,QAA7B,EAJY,CAKZ;AACH,CAPD,E,CAUA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { wp } from '../wordpress/api';\n\n// A. Use wpapi to pull a specific paper\n// B. Take all html from that paper and feed it to particle finder\n\nconst sampleUrl = 'https://www.thepathoftruth.com/what-the-lord-has-done-with-me/part9/p1.htm'\nconst domainUrl = 'https://www.thepathoftruth.com/'\nconst theoAuto = 'what-the-lord-has-done-with-me/'\nconst getChapter = (n: number) => `part${n}/`;\nconst getPage = (n: number) => `p${n}`;\nconst sampleSlug = 'all-men-are-not-from-god-2'\n\nexport const theoAutoURL = (chapter: number, page: number) => domainUrl + theoAuto + getChapter(chapter) + getPage(page) + '.htm';\n\n\nexport const getPaperByUrl = (url: string = '') => {\n    url = url.trim();\n    if (!url) {\n        console.warn('cannot handle an empty url');\n        return\n    }\n    console.log('searching for url :>> ', url);\n    return wp.pages()\n        .search(url)\n        // .slug(sampleSlug)\n        // .path(url)\n        .then(result => {\n            let filtered = result.filter(page=>page.slug!=='sitemap')\n            const slugs = result.map(page => page.slug);\n            // console.log('result :>> ', result);\n            console.log('filtered :>> ', filtered)            \n            // console.log('slugs :>> ', slugs)\n        })\n\n        // We can ignore Unexpected token ﻿ in JSON at position 0, per this explanation:\n        .catch(error => console.error(error.message))\n\n    //.map(r=>r.content)\n\n}\n\n\n// getPaperByUrl(sampleUrl)\ngetPaperByUrl(theoAutoURL(9, 1))\n.then(result => {\n    let filtered = result.filter(page=>page.slug!=='sitemap')\n    const slugs = result.map(page => page.slug);\n    // console.log('result :>> ', result);\n    console.log('filtered :>> ', filtered)            \n    // console.log('slugs :>> ', slugs)\n})\n\n\n// const result = await getPaperByUrl(sampleUrl)\n// console.log('result :>> ', result)\n\n// 1. Find tags around a Particle\n//  a. Verify title is 'Particle'\n//  b. Take the contents within that particle and run countWords() on it.\n// 2. Create a countWords() function that creates a weighted hashmap of individual words and their counts.\n\n"]},"metadata":{},"sourceType":"module"}