{"ast":null,"code":"import { wp } from '../wordpress/api'; // A. Use wpapi to pull a specific paper\n// B. Take all html from that paper and feed it to particle finder\n\nconst sampleUrl = 'https://www.thepathoftruth.com/what-the-lord-has-done-with-me/part9/p1.htm';\nconst domainUrl = 'https://www.thepathoftruth.com/';\nconst theoAuto = 'what-the-lord-has-done-with-me/';\n\nconst getChapter = n => `part${n}/`;\n\nconst getPage = n => `p${n}`; // const sampleSlug = 'all-men-are-not-from-god-2'\n\n\nexport const theoAutoURL = (chapter, page) => domainUrl + theoAuto + getChapter(chapter) + getPage(page) + '.htm';\nexport const getPapersByUrlAsync = async (url = '') => {\n  url = url.trim();\n\n  if (!url) {\n    console.warn('cannot handle an empty url');\n    return;\n  }\n\n  console.log('searching for url :>> ', url);\n  return wp.pages().search(url); // .slug(sampleSlug)\n};\nexport const getTheoPaperAsync = async (chapter, page = 1) => await getPapersByUrlAsync(theoAutoURL(chapter, page)); // getPaperByUrl(sampleUrl)\n// getPaperByUrl(theoAutoURL(9, 1))\n// .then(result => {\n//     let filtered = result.filter(page=>page.slug!=='sitemap')\n//     const slugs = result.map(page => page.slug);\n//     // console.log('result :>> ', result);\n//     console.log('filtered :>> ', filtered)            \n//     // console.log('slugs :>> ', slugs)\n// })\n// // We can ignore Unexpected token ﻿ in JSON at position 0, per this explanation:\n// .catch(error => console.error(error.message))\n// const result = await getPaperByUrl(sampleUrl)\n// console.log('result :>> ', result)\n// 1. Find tags around a Particle\n//  a. Verify title is 'Particle'\n//  b. Take the contents within that particle and run countWords() on it.\n// 2. Create a countWords() function that creates a weighted hashmap of individual words and their counts.","map":{"version":3,"sources":["/home/michael/Desktop/CodeProjects/TPOT/TPOT-sitescan/components/particle-scanner.ts"],"names":["wp","sampleUrl","domainUrl","theoAuto","getChapter","n","getPage","theoAutoURL","chapter","page","getPapersByUrlAsync","url","trim","console","warn","log","pages","search","getTheoPaperAsync"],"mappings":"AAAA,SAASA,EAAT,QAAmB,kBAAnB,C,CAEA;AACA;;AAEA,MAAMC,SAAS,GAAG,4EAAlB;AACA,MAAMC,SAAS,GAAG,iCAAlB;AACA,MAAMC,QAAQ,GAAG,iCAAjB;;AACA,MAAMC,UAAU,GAAIC,CAAD,IAAgB,OAAMA,CAAE,GAA3C;;AACA,MAAMC,OAAO,GAAID,CAAD,IAAgB,IAAGA,CAAE,EAArC,C,CACA;;;AAEA,OAAO,MAAME,WAAW,GAAG,CAACC,OAAD,EAAkBC,IAAlB,KAAmCP,SAAS,GAAGC,QAAZ,GAAuBC,UAAU,CAACI,OAAD,CAAjC,GAA6CF,OAAO,CAACG,IAAD,CAApD,GAA6D,MAApH;AAEP,OAAO,MAAMC,mBAAmB,GAAG,OAAOC,GAAW,GAAG,EAArB,KAA4B;AAC3DA,EAAAA,GAAG,GAAGA,GAAG,CAACC,IAAJ,EAAN;;AACA,MAAI,CAACD,GAAL,EAAU;AACNE,IAAAA,OAAO,CAACC,IAAR,CAAa,4BAAb;AACA;AACH;;AACDD,EAAAA,OAAO,CAACE,GAAR,CAAY,wBAAZ,EAAsCJ,GAAtC;AACA,SAAOX,EAAE,CAACgB,KAAH,GACFC,MADE,CACKN,GADL,CAAP,CAP2D,CAS3D;AACH,CAVM;AAYP,OAAO,MAAMO,iBAAiB,GAAG,OAAOV,OAAP,EAAwBC,IAAY,GAAG,CAAvC,KAC7B,MAAMC,mBAAmB,CAACH,WAAW,CAACC,OAAD,EAAUC,IAAV,CAAZ,CADtB,C,CAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { wp } from '../wordpress/api';\n\n// A. Use wpapi to pull a specific paper\n// B. Take all html from that paper and feed it to particle finder\n\nconst sampleUrl = 'https://www.thepathoftruth.com/what-the-lord-has-done-with-me/part9/p1.htm'\nconst domainUrl = 'https://www.thepathoftruth.com/'\nconst theoAuto = 'what-the-lord-has-done-with-me/'\nconst getChapter = (n: number) => `part${n}/`;\nconst getPage = (n: number) => `p${n}`;\n// const sampleSlug = 'all-men-are-not-from-god-2'\n\nexport const theoAutoURL = (chapter: number, page: number) => domainUrl + theoAuto + getChapter(chapter) + getPage(page) + '.htm';\n\nexport const getPapersByUrlAsync = async (url: string = '') => {\n    url = url.trim();\n    if (!url) {\n        console.warn('cannot handle an empty url');\n        return\n    }\n    console.log('searching for url :>> ', url);\n    return wp.pages()\n        .search(url)\n    // .slug(sampleSlug)\n}\n\nexport const getTheoPaperAsync = async (chapter: number, page: number = 1) =>\n    await getPapersByUrlAsync(theoAutoURL(chapter, page))\n\n// getPaperByUrl(sampleUrl)\n// getPaperByUrl(theoAutoURL(9, 1))\n// .then(result => {\n//     let filtered = result.filter(page=>page.slug!=='sitemap')\n//     const slugs = result.map(page => page.slug);\n//     // console.log('result :>> ', result);\n//     console.log('filtered :>> ', filtered)            \n//     // console.log('slugs :>> ', slugs)\n// })\n\n// // We can ignore Unexpected token ﻿ in JSON at position 0, per this explanation:\n// .catch(error => console.error(error.message))\n\n// const result = await getPaperByUrl(sampleUrl)\n// console.log('result :>> ', result)\n\n// 1. Find tags around a Particle\n//  a. Verify title is 'Particle'\n//  b. Take the contents within that particle and run countWords() on it.\n// 2. Create a countWords() function that creates a weighted hashmap of individual words and their counts.\n\n"]},"metadata":{},"sourceType":"module"}