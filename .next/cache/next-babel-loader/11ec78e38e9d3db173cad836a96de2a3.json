{"ast":null,"code":"import { useMemo } from 'react';\nimport { applySnapshot, types } from 'mobx-state-tree';\nlet store;\nconst Store = types.model({\n  lastUpdate: types.Date,\n  light: false\n}).actions(self => {\n  let timer;\n\n  const start = () => {\n    timer = setInterval(() => {\n      // mobx-state-tree doesn't allow anonymous callbacks changing data.\n      // Pass off to another action instead (need to cast self as any\n      // because typescript doesn't yet know about the actions we're\n      // adding to self here)\n      ;\n      self.update();\n    }, 1000);\n  };\n\n  const update = () => {\n    self.lastUpdate = new Date(Date.now());\n    self.light = true;\n  };\n\n  const stop = () => {\n    clearInterval(timer);\n  };\n\n  return {\n    start,\n    stop,\n    update\n  };\n});\nexport function initializeStore(snapshot = null) {\n  var _store2;\n\n  const _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : Store.create({\n    lastUpdate: 0\n  }); // If your page has Next.js data fetching methods that use a Mobx store, it will\n  // get hydrated here, check `pages/ssg.tsx` and `pages/ssr.tsx` for more details\n\n\n  if (snapshot) {\n    applySnapshot(_store, snapshot);\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return store;\n}\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}","map":null,"metadata":{},"sourceType":"module"}