{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { applySnapshot, types } from 'mobx-state-tree';\nvar store;\nvar Store = types.model({\n  lastUpdate: types.Date // light: false,\n\n}).actions(_c = function _c(self) {\n  var timer;\n\n  var start = function start() {\n    timer = setInterval(function () {\n      // mobx-state-tree doesn't allow anonymous callbacks changing data.\n      // Pass off to another action instead (need to cast self as any\n      // because typescript doesn't yet know about the actions we're\n      // adding to self here)\n      ;\n      self.update();\n    }, 1000);\n  };\n\n  var update = function update() {\n    self.lastUpdate = new Date(Date.now());\n    self.light = true;\n  };\n\n  var stop = function stop() {\n    clearInterval(timer);\n  };\n\n  return {\n    start: start,\n    stop: stop,\n    update: update\n  };\n});\n_c2 = Store;\nexport function initializeStore() {\n  var _store2;\n\n  var snapshot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : Store.create({\n    lastUpdate: 0\n  }); // If your page has Next.js data fetching methods that use a Mobx store, it will\n  // get hydrated here, check `pages/ssg.tsx` and `pages/ssr.tsx` for more details\n\n\n  if (snapshot) {\n    applySnapshot(_store, snapshot);\n  } // For SSG and SSR always create a new store\n\n\n  if (false) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return store;\n}\nexport function useStore(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeStore(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useStore, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Store$types\\n  .model({\\n    lastUpdate: types.Date,\\n    // light: false,\\n  })\\n  .actions\");\n$RefreshReg$(_c2, \"Store\");","map":{"version":3,"sources":["/home/michael/Desktop/CodeProjects/TPOT/TPOT-sitescan/particle-parser/store.ts"],"names":["useMemo","applySnapshot","types","store","Store","model","lastUpdate","Date","actions","self","timer","start","setInterval","update","now","light","stop","clearInterval","initializeStore","snapshot","_store","create","useStore","initialState"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SACEC,aADF,EAKEC,KALF,QAMO,iBANP;AAQA,IAAIC,KAAJ;AAEA,IAAMC,KAAK,GAAGF,KAAK,CAChBG,KADW,CACL;AACLC,EAAAA,UAAU,EAAEJ,KAAK,CAACK,IADb,CAEL;;AAFK,CADK,EAKXC,OALW,MAKH,YAACC,IAAD,EAAU;AACjB,MAAIC,KAAJ;;AACA,MAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClBD,IAAAA,KAAK,GAAGE,WAAW,CAAC,YAAM;AACxB;AACA;AACA;AACA;AACA;AAAEH,MAAAA,IAAD,CAAcI,MAAd;AACF,KANkB,EAMhB,IANgB,CAAnB;AAOD,GARD;;AASA,MAAMA,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBJ,IAAAA,IAAI,CAACH,UAAL,GAAkB,IAAIC,IAAJ,CAASA,IAAI,CAACO,GAAL,EAAT,CAAlB;AACAL,IAAAA,IAAI,CAACM,KAAL,GAAa,IAAb;AACD,GAHD;;AAIA,MAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjBC,IAAAA,aAAa,CAACP,KAAD,CAAb;AACD,GAFD;;AAGA,SAAO;AAAEC,IAAAA,KAAK,EAALA,KAAF;AAASK,IAAAA,IAAI,EAAJA,IAAT;AAAeH,IAAAA,MAAM,EAANA;AAAf,GAAP;AACD,CAxBW,CAAd;MAAMT,K;AA8BN,OAAO,SAASc,eAAT,GAA0C;AAAA;;AAAA,MAAjBC,QAAiB,uEAAN,IAAM;;AAC/C,MAAMC,MAAM,cAAGjB,KAAH,6CAAYC,KAAK,CAACiB,MAAN,CAAa;AAAEf,IAAAA,UAAU,EAAE;AAAd,GAAb,CAAxB,CAD+C,CAG/C;AACA;;;AACA,MAAIa,QAAJ,EAAc;AACZlB,IAAAA,aAAa,CAACmB,MAAD,EAASD,QAAT,CAAb;AACD,GAP8C,CAQ/C;;;AACA,aAAmC,OAAOC,MAAP,CATY,CAU/C;;AACA,MAAI,CAACjB,KAAL,EAAYA,KAAK,GAAGiB,MAAR;AAEZ,SAAOjB,KAAP;AACD;AAED,OAAO,SAASmB,QAAT,CAAkBC,YAAlB,EAAqC;AAAA;;AAC1C,MAAMpB,KAAK,GAAGH,OAAO,CAAC;AAAA,WAAMkB,eAAe,CAACK,YAAD,CAArB;AAAA,GAAD,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOpB,KAAP;AACD;;GAHemB,Q","sourcesContent":["import { useMemo } from 'react'\nimport {\n  applySnapshot,\n  Instance,\n  SnapshotIn,\n  SnapshotOut,\n  types,\n} from 'mobx-state-tree'\n\nlet store: IStore | undefined\n\nconst Store = types\n  .model({\n    lastUpdate: types.Date,\n    // light: false,\n  })\n  .actions((self) => {\n    let timer: any\n    const start = () => {\n      timer = setInterval(() => {\n        // mobx-state-tree doesn't allow anonymous callbacks changing data.\n        // Pass off to another action instead (need to cast self as any\n        // because typescript doesn't yet know about the actions we're\n        // adding to self here)\n        ;(self as any).update()\n      }, 1000)\n    }\n    const update = () => {\n      self.lastUpdate = new Date(Date.now())\n      self.light = true\n    }\n    const stop = () => {\n      clearInterval(timer)\n    }\n    return { start, stop, update }\n  })\n\nexport type IStore = Instance<typeof Store>\nexport type IStoreSnapshotIn = SnapshotIn<typeof Store>\nexport type IStoreSnapshotOut = SnapshotOut<typeof Store>\n\nexport function initializeStore(snapshot = null) {\n  const _store = store ?? Store.create({ lastUpdate: 0 })\n\n  // If your page has Next.js data fetching methods that use a Mobx store, it will\n  // get hydrated here, check `pages/ssg.tsx` and `pages/ssr.tsx` for more details\n  if (snapshot) {\n    applySnapshot(_store, snapshot)\n  }\n  // For SSG and SSR always create a new store\n  if (typeof window === 'undefined') return _store\n  // Create the store once in the client\n  if (!store) store = _store\n\n  return store\n}\n\nexport function useStore(initialState: any) {\n  const store = useMemo(() => initializeStore(initialState), [initialState])\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}