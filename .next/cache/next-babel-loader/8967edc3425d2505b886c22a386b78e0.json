{"ast":null,"code":"import { wp } from '../wordpress/api'; // A. Use wpapi to pull a specific paper\n// B. Take all html from that paper and feed it to particle finder\n\nconst sampleUrl = 'https://www.thepathoftruth.com/what-the-lord-has-done-with-me/part9/p1.htm';\nconst domainUrl = 'https://www.thepathoftruth.com/';\nconst theoAuto = 'what-the-lord-has-done-with-me/';\n\nconst getChapter = n => `part${n}/`;\n\nconst getPage = n => `p${n}`;\n\nconst sampleSlug = 'all-men-are-not-from-god-2';\nexport const theoAutoURL = (chapter, page) => domainUrl + theoAuto + getChapter(chapter) + getPage(page) + '.htm';\nexport const getPaperByUrl = (url = '') => {\n  url = url.trim();\n\n  if (!url) {\n    console.warn('cannot handle an empty url');\n    return;\n  }\n\n  console.log('searching for url :>> ', url);\n  return wp.pages().search('what-the-lord-has-done-with-me') // .slug(sampleSlug)\n  // .path(url)\n  .then(result => {\n    // console.log('result :>> ', result)            \n    console.log('result :>> ', result.map(page => page.slug));\n  }) // We can ignore Unexpected token ﻿ in JSON at position 0, per this explanation:\n  .catch(error => console.error(error.message)); //.map(r=>r.content)\n}; // getPaperByUrl(sampleUrl)\n\ngetPaperByUrl(theoAutoURL(9, 1)); // const result = await getPaperByUrl(sampleUrl)\n// console.log('result :>> ', result)\n// 1. Find tags around a Particle\n//  a. Verify title is 'Particle'\n//  b. Take the contents within that particle and run countWords() on it.\n// 2. Create a countWords() function that creates a weighted hashmap of individual words and their counts.","map":{"version":3,"sources":["/home/michael/Desktop/CodeProjects/TPOT/TPOT-sitescan/particle-parser/components/particle-scanner.ts"],"names":["wp","sampleUrl","domainUrl","theoAuto","getChapter","n","getPage","sampleSlug","theoAutoURL","chapter","page","getPaperByUrl","url","trim","console","warn","log","pages","search","then","result","map","slug","catch","error","message"],"mappings":"AAAA,SAASA,EAAT,QAAmB,kBAAnB,C,CAEA;AACA;;AAEA,MAAMC,SAAS,GAAG,4EAAlB;AACA,MAAMC,SAAS,GAAG,iCAAlB;AACA,MAAMC,QAAQ,GAAG,iCAAjB;;AACA,MAAMC,UAAU,GAAIC,CAAD,IAAgB,OAAMA,CAAE,GAA3C;;AACA,MAAMC,OAAO,GAAID,CAAD,IAAgB,IAAGA,CAAE,EAArC;;AACA,MAAME,UAAU,GAAG,4BAAnB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,OAAD,EAAkBC,IAAlB,KAAmCR,SAAS,GAAGC,QAAZ,GAAuBC,UAAU,CAACK,OAAD,CAAjC,GAA6CH,OAAO,CAACI,IAAD,CAApD,GAA4D,MAAnH;AAGP,OAAO,MAAMC,aAAa,GAAG,CAACC,GAAW,GAAG,EAAf,KAAsB;AAC/CA,EAAAA,GAAG,GAAGA,GAAG,CAACC,IAAJ,EAAN;;AACA,MAAI,CAACD,GAAL,EAAU;AACNE,IAAAA,OAAO,CAACC,IAAR,CAAa,4BAAb;AACA;AACH;;AACDD,EAAAA,OAAO,CAACE,GAAR,CAAY,wBAAZ,EAAsCJ,GAAtC;AACA,SAAOZ,EAAE,CAACiB,KAAH,GACLC,MADK,CACE,gCADF,EAEH;AACA;AAHG,GAIFC,IAJE,CAIGC,MAAM,IAAI;AACZ;AACAN,IAAAA,OAAO,CAACE,GAAR,CAAY,aAAZ,EAA2BI,MAAM,CAACC,GAAP,CAAWX,IAAI,IAAEA,IAAI,CAACY,IAAtB,CAA3B;AACH,GAPE,EASH;AATG,GAUFC,KAVE,CAUIC,KAAK,IAAGV,OAAO,CAACU,KAAR,CAAcA,KAAK,CAACC,OAApB,CAVZ,CAAP,CAP+C,CAmB3C;AAEP,CArBM,C,CAwBP;;AACAd,aAAa,CAACH,WAAW,CAAC,CAAD,EAAG,CAAH,CAAZ,CAAb,C,CAEA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { wp } from '../wordpress/api';\n\n// A. Use wpapi to pull a specific paper\n// B. Take all html from that paper and feed it to particle finder\n\nconst sampleUrl = 'https://www.thepathoftruth.com/what-the-lord-has-done-with-me/part9/p1.htm'\nconst domainUrl = 'https://www.thepathoftruth.com/'\nconst theoAuto = 'what-the-lord-has-done-with-me/'\nconst getChapter = (n: number) => `part${n}/`;\nconst getPage = (n: number) => `p${n}`;\nconst sampleSlug = 'all-men-are-not-from-god-2'\n\nexport const theoAutoURL = (chapter: number, page: number) => domainUrl + theoAuto + getChapter(chapter) + getPage(page)+ '.htm';\n\n\nexport const getPaperByUrl = (url: string = '') => {\n    url = url.trim();\n    if (!url) {\n        console.warn('cannot handle an empty url');\n        return\n    }\n    console.log('searching for url :>> ', url);\n    return wp.pages()\n     .search('what-the-lord-has-done-with-me')\n        // .slug(sampleSlug)\n        // .path(url)\n        .then(result => {\n            // console.log('result :>> ', result)            \n            console.log('result :>> ', result.map(page=>page.slug))            \n        })\n\n        // We can ignore Unexpected token ﻿ in JSON at position 0, per this explanation:\n        .catch(error=> console.error(error.message))\n\n        //.map(r=>r.content)\n        \n}\n\n\n// getPaperByUrl(sampleUrl)\ngetPaperByUrl(theoAutoURL(9,1))\n\n// const result = await getPaperByUrl(sampleUrl)\n// console.log('result :>> ', result)\n\n// 1. Find tags around a Particle\n//  a. Verify title is 'Particle'\n//  b. Take the contents within that particle and run countWords() on it.\n// 2. Create a countWords() function that creates a weighted hashmap of individual words and their counts.\n\n"]},"metadata":{},"sourceType":"module"}